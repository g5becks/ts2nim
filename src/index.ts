import { ClassDeclaration, Node, Project, SyntaxKind, TypeAliasDeclaration, TypeParameterDeclaration } from 'ts-morph'

const proj = new Project({ tsConfigFilePath: './tsconfig.json' })

const file = proj.getSourceFiles()[0]

const aliaser = file.getTypeAlias('')
type DoneEvent = { message: 'Done' }
type NodeVisitor = (node: Node | Node[]) => string | undefined | DoneEvent

const nimReserved = [
    'addr',
    'and',
    'as',
    'asm',
    'bind',
    'block',
    'break',
    'case',
    'cast',
    'concept',
    'const',
    'continue',
    'converter',
    'defer',
    'discard',
    'distinct',
    'div',
    'do',
    'elif',
    'else',
    'end',
    'enum',
    'except',
    'export',
    'finally',
    'for',
    'from',
    'func',
    'if',
    'import',
    'in',
    'include',
    'interface',
    'is',
    'isnot',
    'iterator',
    'let',
    'macro',
    'method',
    'mixin',
    'mod',
    'nil',
    'not',
    'notin',
    'object',
    'of',
    'or',
    'out',
    'proc',
    'ptr',
    'raise',
    'ref',
    'return',
    'shl',
    'shr',
    'static',
    'template',
    'try',
    'tuple',
    'type',
    'using',
    'var',
    'when',
    'while',
    'xor',
    'yield',
    'Object',
]

const capitalize = (text: string): string => text.replace(/^\w/, (c) => c.toUpperCase())

const lowerCase = (text: string): string => text.replace(/^\w/, (c) => c.toLowerCase())

const typesMap = new Map<string, string>([
    ['string', 'cstring'],
    ['boolean', 'bool'],
    ['any', 'any'],
    ['unknown', 'any'],
    ['number', 'int'],
    ['void', 'void'],
    ['null', '`null`'],
    ['undefined', 'undefined'],
    ['never', 'never'],
])
const isReservedWord = (word: string): boolean => nimReserved.includes(word)

const hasTypeParam = (node: Node): boolean => node.getChildrenOfKind(SyntaxKind.TypeParameter).length > 0

const typeParamVisitor = (node: Node | Node[]): string => {
    const singleNode = node as TypeParameterDeclaration
    let nodes: TypeParameterDeclaration[] = []
    if (Array.isArray(node)) {
        for (const n of node) {
            nodes = nodes.concat(n as TypeParameterDeclaration)
        }
    }

    return ''
}
const typeAliasVisitor = (node: Node | Node[]): string => {
    const alias = node as TypeAliasDeclaration
    const name = alias.getNameNode().getText().trim()
    const typeName = isReservedWord(name) ? `Js${capitalize(name)}` : capitalize(name)
    if (hasTypeParam(alias)) {
        alias.getTypeParameters()
    }
    return ''
}

const classVisitor = (node: Node | Node[]): string => {
    const classs = node as ClassDeclaration
    const className = classs.getNameNodeOrThrow()?.getText().trim()
    const typeName = isReservedWord(className) ? `Js${capitalize(className)}` : capitalize(className)
    if (hasTypeParam(classs)) {
        classs.getTypeParameters()
    }
    return ''
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const pass = (_node: Node | Node[]) => undefined

/* eslint-disable @typescript-eslint/no-unused-vars */
const vistorMap = new Map<number, NodeVisitor>([
    [SyntaxKind.Unknown, pass],
    [SyntaxKind.EndOfFileToken, (_node: Node | Node[]): DoneEvent => ({ message: 'Done' })],
    [SyntaxKind.SingleLineCommentTrivia, pass], // pass
    [SyntaxKind.MultiLineCommentTrivia, pass], // pass
    [SyntaxKind.NewLineTrivia, pass], // pass
    [SyntaxKind.WhitespaceTrivia, pass], // pass
    [SyntaxKind.ShebangTrivia, pass], // pass
    [SyntaxKind.ConflictMarkerTrivia, pass], // pass
    [SyntaxKind.NumericLiteral, pass], // TODO check if this needs conversion
    [SyntaxKind.BigIntLiteral, pass], // TODO check if this needs conversion
    [SyntaxKind.StringLiteral, pass], // TODO check if this needs conversion
    [SyntaxKind.JsxText, pass], // pass
    [SyntaxKind.JsxTextAllWhiteSpaces, pass], // pass
    [SyntaxKind.RegularExpressionLiteral, pass], // pass
    [SyntaxKind.NoSubstitutionTemplateLiteral, pass], // pass
    [SyntaxKind.TemplateHead, pass], // pass
    [SyntaxKind.TemplateMiddle, pass], // pass
    [SyntaxKind.TemplateTail, pass], // pass
    [SyntaxKind.OpenBraceToken, pass],
    [SyntaxKind.CloseBraceToken, pass],
    [SyntaxKind.OpenParenToken, pass],
    [SyntaxKind.CloseParenToken, pass],
    [SyntaxKind.OpenBracketToken, pass],
    [SyntaxKind.CloseBracketToken, pass],
    [SyntaxKind.DotToken, pass],
    [SyntaxKind.DotDotDotToken, pass],
    [SyntaxKind.SemicolonToken, pass],
    [SyntaxKind.CommaToken, pass],
    [SyntaxKind.QuestionDotToken, pass],
    [SyntaxKind.LessThanToken, pass],
    [SyntaxKind.LessThanSlashToken, pass],
    [SyntaxKind.GreaterThanToken, pass],
    [SyntaxKind.LessThanEqualsToken, pass],
    [SyntaxKind.GreaterThanEqualsToken, pass],
    [SyntaxKind.EqualsEqualsToken, pass],
    [SyntaxKind.ExclamationEqualsToken, pass],
    [SyntaxKind.EqualsEqualsEqualsToken, pass],
    [SyntaxKind.ExclamationEqualsEqualsToken, pass],
    [SyntaxKind.EqualsGreaterThanToken, pass],
    [SyntaxKind.PlusToken, pass],
    [SyntaxKind.MinusToken, pass],
    [SyntaxKind.AsteriskToken, pass],
    [SyntaxKind.AsteriskAsteriskToken, pass],
    [SyntaxKind.SlashToken, pass],
    [SyntaxKind.PercentToken, pass],
    [SyntaxKind.PlusPlusToken, pass],
    [SyntaxKind.MinusMinusToken, pass],
    [SyntaxKind.LessThanLessThanToken, pass],
    [SyntaxKind.GreaterThanGreaterThanToken, pass],
    [SyntaxKind.GreaterThanGreaterThanGreaterThanToken, pass],
    [SyntaxKind.AmpersandToken, pass],
    [SyntaxKind.BarToken, pass],
    [SyntaxKind.CaretToken, pass],
    [SyntaxKind.ExclamationToken, pass],
    [SyntaxKind.TildeToken, pass],
    [SyntaxKind.AmpersandAmpersandToken, pass],
    [SyntaxKind.BarBarToken, pass],
    [SyntaxKind.QuestionToken, pass],
    [SyntaxKind.ColonToken, pass],
    [SyntaxKind.AtToken, pass],
    [SyntaxKind.QuestionQuestionToken, pass],
    [SyntaxKind.BacktickToken, pass],
    [SyntaxKind.EqualsToken, pass],
    [SyntaxKind.PlusEqualsToken, pass],
    [SyntaxKind.MinusEqualsToken, pass],
    [SyntaxKind.AsteriskEqualsToken, pass],
    [SyntaxKind.AsteriskAsteriskEqualsToken, pass],
    [SyntaxKind.SlashEqualsToken, pass],
    [SyntaxKind.PercentEqualsToken, pass],
    [SyntaxKind.LessThanLessThanEqualsToken, pass],
    [SyntaxKind.GreaterThanGreaterThanEqualsToken, pass],
    [SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken, pass],
    [SyntaxKind.AmpersandEqualsToken, pass],
    [SyntaxKind.BarEqualsToken, pass],
    [SyntaxKind.BarBarEqualsToken, pass],
    [SyntaxKind.AmpersandAmpersandEqualsToken, pass],
    [SyntaxKind.QuestionQuestionEqualsToken, pass],
    [SyntaxKind.CaretEqualsToken, pass],
    [SyntaxKind.Identifier, pass],
    [SyntaxKind.PrivateIdentifier, pass],
    [SyntaxKind.BreakKeyword, pass],
    [SyntaxKind.CaseKeyword, pass],
    [SyntaxKind.CatchKeyword, pass],
    [SyntaxKind.ClassKeyword, pass],
    [SyntaxKind.ConstKeyword, pass],
    [SyntaxKind.ContinueKeyword, pass],
    [SyntaxKind.DebuggerKeyword, pass],
    [SyntaxKind.DefaultKeyword, pass],
    [SyntaxKind.DeleteKeyword, pass],
    [SyntaxKind.DoKeyword, pass],
    [SyntaxKind.ElseKeyword, pass],
    [SyntaxKind.EnumKeyword, pass],
    [SyntaxKind.ExportKeyword, pass],
    [SyntaxKind.ExtendsKeyword, pass],
    [SyntaxKind.FalseKeyword, pass],
    [SyntaxKind.FinallyKeyword, pass],
    [SyntaxKind.ForKeyword, pass],
    [SyntaxKind.FunctionKeyword, pass],
    [SyntaxKind.IfKeyword, pass],
    [SyntaxKind.ImportKeyword, pass],
    [SyntaxKind.InKeyword, pass],
    [SyntaxKind.InstanceOfKeyword, pass],
    [SyntaxKind.NewKeyword, pass],
    [SyntaxKind.NullKeyword, pass],
    [SyntaxKind.ReturnKeyword, pass],
    [SyntaxKind.SuperKeyword, pass],
    [SyntaxKind.SwitchKeyword, pass],
    [SyntaxKind.ThisKeyword, pass],
    [SyntaxKind.ThrowKeyword, pass],
    [SyntaxKind.TrueKeyword, pass],
    [SyntaxKind.TryKeyword, pass],
    [SyntaxKind.TypeOfKeyword, pass],
    [SyntaxKind.VarKeyword, pass],
    [SyntaxKind.VoidKeyword, pass],
    [SyntaxKind.WhileKeyword, pass],
    [SyntaxKind.WithKeyword, pass],
    [SyntaxKind.ImplementsKeyword, pass],
    [SyntaxKind.InterfaceKeyword, pass],
    [SyntaxKind.LetKeyword, pass],
    [SyntaxKind.PackageKeyword, pass],
    [SyntaxKind.PrivateKeyword, pass],
    [SyntaxKind.ProtectedKeyword, pass],
    [SyntaxKind.PublicKeyword, pass],
    [SyntaxKind.StaticKeyword, pass],
    [SyntaxKind.YieldKeyword, pass],
    [SyntaxKind.AbstractKeyword, pass],
    [SyntaxKind.AsKeyword, pass],
    [SyntaxKind.AssertsKeyword, pass],
    [SyntaxKind.AnyKeyword, pass],
    [SyntaxKind.AsyncKeyword, pass],
    [SyntaxKind.AwaitKeyword, pass],
    [SyntaxKind.BooleanKeyword, pass],
    [SyntaxKind.ConstructorKeyword, pass],
    [SyntaxKind.DeclareKeyword, pass],
    [SyntaxKind.GetKeyword, pass],
    [SyntaxKind.InferKeyword, pass],
    [SyntaxKind.IsKeyword, pass],
    [SyntaxKind.KeyOfKeyword, pass],
    [SyntaxKind.ModuleKeyword, pass],
    [SyntaxKind.NamespaceKeyword, pass],
    [SyntaxKind.NeverKeyword, pass],
    [SyntaxKind.ReadonlyKeyword, pass],
    [SyntaxKind.RequireKeyword, pass],
    [SyntaxKind.NumberKeyword, pass],
    [SyntaxKind.ObjectKeyword, pass],
    [SyntaxKind.SetKeyword, pass],
    [SyntaxKind.StringKeyword, pass],
    [SyntaxKind.SymbolKeyword, pass],
    [SyntaxKind.TypeKeyword, pass],
    [SyntaxKind.UndefinedKeyword, pass],
    [SyntaxKind.UniqueKeyword, pass],
    [SyntaxKind.UnknownKeyword, pass],
    [SyntaxKind.FromKeyword, pass],
    [SyntaxKind.GlobalKeyword, pass],
    [SyntaxKind.BigIntKeyword, pass],
    [SyntaxKind.OfKeyword, pass],
    [SyntaxKind.QualifiedName, pass],
    [SyntaxKind.ComputedPropertyName, pass],
    [SyntaxKind.TypeParameter, typeParamVisitor],
    [SyntaxKind.Parameter, pass],
    [SyntaxKind.Decorator, pass],
    [SyntaxKind.PropertySignature, pass],
    [SyntaxKind.PropertyDeclaration, pass],
    [SyntaxKind.MethodSignature, pass],
    [SyntaxKind.MethodDeclaration, pass],
    [SyntaxKind.Constructor, pass],
    [SyntaxKind.GetAccessor, pass],
    [SyntaxKind.SetAccessor, pass],
    [SyntaxKind.CallSignature, pass],
    [SyntaxKind.ConstructSignature, pass],
    [SyntaxKind.IndexSignature, pass],
    [SyntaxKind.TypePredicate, pass],
    [SyntaxKind.TypeReference, pass],
    [SyntaxKind.FunctionType, pass],
    [SyntaxKind.ConstructorType, pass],
    [SyntaxKind.TypeQuery, pass],
    [SyntaxKind.TypeLiteral, pass],
    [SyntaxKind.ArrayType, pass],
    [SyntaxKind.TupleType, pass],
    [SyntaxKind.OptionalType, pass],
    [SyntaxKind.RestType, pass],
    [SyntaxKind.UnionType, pass],
    [SyntaxKind.IntersectionType, pass],
    [SyntaxKind.ConditionalType, pass],
    [SyntaxKind.InferType, pass],
    [SyntaxKind.ParenthesizedType, pass],
    [SyntaxKind.ThisType, pass],
    [SyntaxKind.TypeOperator, pass],
    [SyntaxKind.IndexedAccessType, pass],
    [SyntaxKind.MappedType, pass],
    [SyntaxKind.LiteralType, pass],
    [SyntaxKind.NamedTupleMember, pass],
    [SyntaxKind.ImportType, pass],
    [SyntaxKind.ObjectBindingPattern, pass],
    [SyntaxKind.ArrayBindingPattern, pass],
    [SyntaxKind.BindingElement, pass],
    [SyntaxKind.ArrayLiteralExpression, pass],
    [SyntaxKind.ObjectLiteralExpression, pass],
    [SyntaxKind.PropertyAccessExpression, pass],
    [SyntaxKind.ElementAccessExpression, pass],
    [SyntaxKind.CallExpression, pass],
    [SyntaxKind.NewExpression, pass],
    [SyntaxKind.TaggedTemplateExpression, pass],
    [SyntaxKind.TypeAssertionExpression, pass],
    [SyntaxKind.ParenthesizedExpression, pass],
    [SyntaxKind.FunctionExpression, pass],
    [SyntaxKind.ArrowFunction, pass],
    [SyntaxKind.DeleteExpression, pass],
    [SyntaxKind.TypeOfExpression, pass],
    [SyntaxKind.VoidExpression, pass],
    [SyntaxKind.AwaitExpression, pass],
    [SyntaxKind.PrefixUnaryExpression, pass],
    [SyntaxKind.PostfixUnaryExpression, pass],
    [SyntaxKind.BinaryExpression, pass],
    [SyntaxKind.ConditionalExpression, pass],
    [SyntaxKind.TemplateExpression, pass],
    [SyntaxKind.YieldExpression, pass],
    [SyntaxKind.SpreadElement, pass],
    [SyntaxKind.ClassExpression, pass],
    [SyntaxKind.OmittedExpression, pass],
    [SyntaxKind.ExpressionWithTypeArguments, pass],
    [SyntaxKind.AsExpression, pass],
    [SyntaxKind.NonNullExpression, pass],
    [SyntaxKind.MetaProperty, pass],
    [SyntaxKind.SyntheticExpression, pass],
    [SyntaxKind.TemplateSpan, pass],
    [SyntaxKind.SemicolonClassElement, pass],
    [SyntaxKind.Block, pass],
    [SyntaxKind.EmptyStatement, pass],
    [SyntaxKind.VariableStatement, pass],
    [SyntaxKind.ExpressionStatement, pass],
    [SyntaxKind.IfStatement, pass],
    [SyntaxKind.DoStatement, pass],
    [SyntaxKind.WhileStatement, pass],
    [SyntaxKind.ForStatement, pass],
    [SyntaxKind.ForInStatement, pass],
    [SyntaxKind.ForOfStatement, pass],
    [SyntaxKind.ContinueStatement, pass],
    [SyntaxKind.BreakStatement, pass],
    [SyntaxKind.ReturnStatement, pass],
    [SyntaxKind.WithStatement, pass],
    [SyntaxKind.SwitchStatement, pass],
    [SyntaxKind.LabeledStatement, pass],
    [SyntaxKind.ThrowStatement, pass],
    [SyntaxKind.TryStatement, pass],
    [SyntaxKind.DebuggerStatement, pass],
    [SyntaxKind.VariableDeclaration, pass],
    [SyntaxKind.VariableDeclarationList, pass],
    [SyntaxKind.FunctionDeclaration, pass],
    [SyntaxKind.ClassDeclaration, pass],
    [SyntaxKind.InterfaceDeclaration, pass],
    [SyntaxKind.TypeAliasDeclaration, typeAliasVisitor],
    [SyntaxKind.EnumDeclaration, pass],
    [SyntaxKind.ModuleDeclaration, pass],
    [SyntaxKind.ModuleBlock, pass],
    [SyntaxKind.CaseBlock, pass],
    [SyntaxKind.NamespaceExportDeclaration, pass],
    [SyntaxKind.ImportEqualsDeclaration, pass],
    [SyntaxKind.ImportDeclaration, pass],
    [SyntaxKind.ImportClause, pass],
    [SyntaxKind.NamespaceImport, pass],
    [SyntaxKind.NamedImports, pass],
    [SyntaxKind.ImportSpecifier, pass],
    [SyntaxKind.ExportAssignment, pass],
    [SyntaxKind.ExportDeclaration, pass],
    [SyntaxKind.NamedExports, pass],
    [SyntaxKind.NamespaceExport, pass],
    [SyntaxKind.ExportSpecifier, pass],
    [SyntaxKind.MissingDeclaration, pass],
    [SyntaxKind.ExternalModuleReference, pass],
    [SyntaxKind.JsxElement, pass],
    [SyntaxKind.JsxSelfClosingElement, pass],
    [SyntaxKind.JsxOpeningElement, pass],
    [SyntaxKind.JsxClosingElement, pass],
    [SyntaxKind.JsxFragment, pass],
    [SyntaxKind.JsxOpeningFragment, pass],
    [SyntaxKind.JsxClosingFragment, pass],
    [SyntaxKind.JsxAttribute, pass],
    [SyntaxKind.JsxAttributes, pass],
    [SyntaxKind.JsxSpreadAttribute, pass],
    [SyntaxKind.JsxExpression, pass],
    [SyntaxKind.CaseClause, pass],
    [SyntaxKind.DefaultClause, pass],
    [SyntaxKind.HeritageClause, pass],
    [SyntaxKind.CatchClause, pass],
    [SyntaxKind.PropertyAssignment, pass],
    [SyntaxKind.ShorthandPropertyAssignment, pass],
    [SyntaxKind.SpreadAssignment, pass],
    [SyntaxKind.EnumMember, pass],
    [SyntaxKind.UnparsedPrologue, pass],
    [SyntaxKind.UnparsedPrepend, pass],
    [SyntaxKind.UnparsedText, pass],
    [SyntaxKind.UnparsedInternalText, pass],
    [SyntaxKind.UnparsedSyntheticReference, pass],
    [SyntaxKind.SourceFile, pass],
    [SyntaxKind.Bundle, pass],
    [SyntaxKind.UnparsedSource, pass],
    [SyntaxKind.InputFiles, pass],
    [SyntaxKind.JSDocTypeExpression, pass],
    [SyntaxKind.JSDocAllType, pass],
    [SyntaxKind.JSDocUnknownType, pass],
    [SyntaxKind.JSDocNullableType, pass],
    [SyntaxKind.JSDocNonNullableType, pass],
    [SyntaxKind.JSDocOptionalType, pass],
    [SyntaxKind.JSDocFunctionType, pass],
    [SyntaxKind.JSDocVariadicType, pass],
    [SyntaxKind.JSDocNamepathType, pass],
    [SyntaxKind.JSDocComment, pass],
    [SyntaxKind.JSDocTypeLiteral, pass],
    [SyntaxKind.JSDocSignature, pass],
    [SyntaxKind.JSDocTag, pass],
    [SyntaxKind.JSDocAugmentsTag, pass],
    [SyntaxKind.JSDocImplementsTag, pass],
    [SyntaxKind.JSDocAuthorTag, pass],
    [SyntaxKind.JSDocDeprecatedTag, pass],
    [SyntaxKind.JSDocClassTag, pass],
    [SyntaxKind.JSDocPublicTag, pass],
    [SyntaxKind.JSDocPrivateTag, pass],
    [SyntaxKind.JSDocProtectedTag, pass],
    [SyntaxKind.JSDocReadonlyTag, pass],
    [SyntaxKind.JSDocCallbackTag, pass],
    [SyntaxKind.JSDocEnumTag, pass],
    [SyntaxKind.JSDocParameterTag, pass],
    [SyntaxKind.JSDocReturnTag, pass],
    [SyntaxKind.JSDocThisTag, pass],
    [SyntaxKind.JSDocTypeTag, pass],
    [SyntaxKind.JSDocTemplateTag, pass],
    [SyntaxKind.JSDocTypedefTag, pass],
    [SyntaxKind.JSDocPropertyTag, pass],
    [SyntaxKind.SyntaxList, pass],
    [SyntaxKind.NotEmittedStatement, pass],
    [SyntaxKind.PartiallyEmittedExpression, pass],
    [SyntaxKind.CommaListExpression, pass],
    [SyntaxKind.MergeDeclarationMarker, pass],
    [SyntaxKind.EndOfDeclarationMarker, pass],
    [SyntaxKind.SyntheticReferenceExpression, pass],
    [SyntaxKind.Count, pass],
    [SyntaxKind.FirstAssignment, pass],
    [SyntaxKind.LastAssignment, pass],
    [SyntaxKind.FirstCompoundAssignment, pass],
    [SyntaxKind.LastCompoundAssignment, pass],
    [SyntaxKind.FirstReservedWord, pass],
    [SyntaxKind.LastReservedWord, pass],
    [SyntaxKind.FirstKeyword, pass],
    [SyntaxKind.LastKeyword, pass],
    [SyntaxKind.FirstFutureReservedWord, pass],
    [SyntaxKind.LastFutureReservedWord, pass],
    [SyntaxKind.FirstTypeNode, pass],
    [SyntaxKind.LastTypeNode, pass],
    [SyntaxKind.FirstPunctuation, pass],
    [SyntaxKind.LastPunctuation, pass],
    [SyntaxKind.FirstToken, pass],
    [SyntaxKind.LastToken, pass],
    [SyntaxKind.FirstTriviaToken, pass],
    [SyntaxKind.LastTriviaToken, pass],
    [SyntaxKind.FirstLiteralToken, pass],
    [SyntaxKind.LastLiteralToken, pass],
    [SyntaxKind.FirstTemplateToken, pass],
    [SyntaxKind.LastTemplateToken, pass],
    [SyntaxKind.FirstBinaryOperator, pass],
    [SyntaxKind.LastBinaryOperator, pass],
    [SyntaxKind.FirstStatement, pass],
    [SyntaxKind.LastStatement, pass],
    [SyntaxKind.FirstNode, pass],
    [SyntaxKind.FirstJSDocNode, pass],
    [SyntaxKind.LastJSDocNode, pass],
    [SyntaxKind.FirstJSDocTagNode, pass],
    [SyntaxKind.LastJSDocTagNode, pass],
])
/*  eslint-enable @typescript-eslint/no-unused-vars */
